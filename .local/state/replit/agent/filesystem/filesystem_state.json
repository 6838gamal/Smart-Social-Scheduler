{"file_contents":{"gmail-reader.py":{"content":"from googleapiclient.discovery import build\nfrom google_auth_oauthlib.flow import InstalledAppFlow\nfrom google.auth.transport.requests import Request\nimport os.path\nimport pickle\n\n# نطاق القراءة فقط\nSCOPES = ['https://www.googleapis.com/auth/gmail.readonly']\n\ndef get_gmail_service():\n    creds = None\n    # إذا كان لدينا توكن سابق نحمله\n    if os.path.exists('token.pickle'):\n        with open('token.pickle', 'rb') as token:\n            creds = pickle.load(token)\n\n    # إذا لم توجد بيانات اعتماد صالحة، نبدأ المصادقة\n    if not creds or not creds.valid:\n        if creds and creds.expired and creds.refresh_token:\n            creds.refresh(Request())\n        else:\n            flow = InstalledAppFlow.from_client_secrets_file('credentials.json', SCOPES)\n            creds = flow.run_local_server(port=8080)\n        # نحفظ التوكن للاستخدام القادم\n        with open('token.pickle', 'wb') as token:\n            pickle.dump(creds, token)\n\n    service = build('gmail', 'v1', credentials=creds)\n    return service\n\n\ndef list_emails():\n    service = get_gmail_service()\n    results = service.users().messages().list(userId='me', maxResults=5).execute()\n    messages = results.get('messages', [])\n\n    if not messages:\n        print('No messages found.')\n    else:\n        for msg in messages:\n            msg_data = service.users().messages().get(userId='me', id=msg['id']).execute()\n            print(f\"📧 From: {msg_data['snippet'][:100]}\")\n\nif __name__ == '__main__':\n    list_emails()\n","size_bytes":1589},"em_re1.py":{"content":"import os\nimport pickle\nimport base64\nfrom googleapiclient.discovery import build\nfrom google_auth_oauthlib.flow import InstalledAppFlow\nfrom google.auth.transport.requests import Request\nfrom datetime import datetime\n\n# نطاق القراءة فقط\nSCOPES = ['https://www.googleapis.com/auth/gmail.readonly']\n\n# بيانات Google Cloud الخاصة بك\nCLIENT_ID = \"1015270124270-a8v1ujjtq41e82vjj4l3tli5e949ftkl.apps.googleusercontent.com\"\nCLIENT_SECRET = \"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\"\n\ndef get_gmail_service():\n    creds = None\n    if os.path.exists('token.pickle'):\n        with open('token.pickle', 'rb') as token:\n            creds = pickle.load(token)\n\n    if not creds or not creds.valid:\n        if creds and creds.expired and creds.refresh_token:\n            creds.refresh(Request())\n        else:\n            client_config = {\n                \"installed\": {\n                    \"client_id\": CLIENT_ID,\n                    \"client_secret\": CLIENT_SECRET,\n                    \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n                    \"token_uri\": \"https://oauth2.googleapis.com/token\",\n                    \"redirect_uris\": [\"http://localhost:8080/\"]\n                }\n            }\n            flow = InstalledAppFlow.from_client_config(client_config, SCOPES)\n            creds = flow.run_local_server(port=8080)\n        with open('token.pickle', 'wb') as token:\n            pickle.dump(creds, token)\n\n    return build('gmail', 'v1', credentials=creds)\n\n\ndef list_emails(max_results=10, save_to_file=True):\n    service = get_gmail_service()\n    results = service.users().messages().list(userId='me', maxResults=max_results).execute()\n    messages = results.get('messages', [])\n\n    if not messages:\n        print('📭 لا توجد رسائل.')\n        return\n\n    all_data = []\n\n    print(f\"\\n📬 آخر {max_results} رسائل من Gmail:\\n\" + \"-\"*50)\n\n    for i, msg in enumerate(messages, 1):\n        msg_data = service.users().messages().get(userId='me', id=msg['id']).execute()\n        headers = msg_data['payload'].get('headers', [])\n        frm = next((h['value'] for h in headers if h['name'] == 'From'), \"غير معروف\")\n        subject = next((h['value'] for h in headers if h['name'] == 'Subject'), \"(بدون عنوان)\")\n        date = next((h['value'] for h in headers if h['name'] == 'Date'), \"غير معروف\")\n        snippet = msg_data.get('snippet', '')\n\n        print(f\"\\n✉️ الرسالة رقم {i}:\")\n        print(f\"المرسل: {frm}\")\n        print(f\"العنوان: {subject}\")\n        print(f\"التاريخ: {date}\")\n        print(f\"المحتوى المختصر: {snippet[:120]}...\")\n\n        all_data.append({\n            \"index\": i,\n            \"from\": frm,\n            \"subject\": subject,\n            \"date\": date,\n            \"snippet\": snippet\n        })\n\n    if save_to_file:\n        save_emails(all_data)\n\n\ndef save_emails(messages):\n    \"\"\"يحفظ الرسائل في ملف نصي منسق.\"\"\"\n    file_name = f\"gmail_inbox_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt\"\n    with open(file_name, \"w\", encoding=\"utf-8\") as f:\n        for msg in messages:\n            f.write(f\"--- الرسالة رقم {msg['index']} ---\\n\")\n            f.write(f\"المرسل: {msg['from']}\\n\")\n            f.write(f\"العنوان: {msg['subject']}\\n\")\n            f.write(f\"التاريخ: {msg['date']}\\n\")\n            f.write(f\"النص المختصر: {msg['snippet']}\\n\")\n            f.write(\"\\n\\n\")\n    print(f\"\\n✅ تم حفظ الرسائل في الملف: {file_name}\\n\")\n\n\nif __name__ == \"__main__\":\n    list_emails(max_results=10)\n","size_bytes":3628},"modules/inbox/email_inbox_desktop_version.py":{"content":"# ================================\n# 📩 EMAIL INBOX MODULE (DESKTOP APP)\n# ================================\n\nfrom telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update\nfrom telegram.ext import ContextTypes\nimport os\nimport pickle\nimport csv\nfrom google_auth_oauthlib.flow import InstalledAppFlow\nfrom googleapiclient.discovery import build\n\n# ---------------------------\n# إعدادات Google OAuth\n# ---------------------------\nSCOPES = ['https://www.googleapis.com/auth/gmail.readonly']\nTOKEN_PATH = \"token_gmail.pickle\"\n\nCLIENT_CONFIG = {\n    \"installed\": {\n        \"client_id\": os.getenv(\"GOOGLE_CLIENT_ID\"),\n        \"client_secret\": os.getenv(\"GOOGLE_CLIENT_SECRET\"),\n        \"redirect_uris\": [\"urn:ietf:wg:oauth:2.0:oob\"],  # Desktop App flow\n        \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n        \"token_uri\": \"https://oauth2.googleapis.com/token\"\n    }\n}\n\n# ===========================\n# عرض واجهة البريد الإلكتروني\n# ===========================\nasync def show_email_inbox(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    text = (\n        \"✉️ رسائل البريد الإلكتروني\\n\"\n        \"───────────────\\n\"\n        \"اضغط الزر أدناه لاختيار حساب Google للسحب من البريد.\"\n    )\n\n    keyboard = [\n        [InlineKeyboardButton(\"🔑 الاتصال بحساب Google\", callback_data=\"email_connect_google\")],\n        [InlineKeyboardButton(\"↩️ العودة\", callback_data=\"inbox_back\")]\n    ]\n    reply_markup = InlineKeyboardMarkup(keyboard)\n\n    if update.callback_query:\n        await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup)\n    elif update.message:\n        await update.message.reply_text(text=text, reply_markup=reply_markup)\n\n# ===========================\n# التعامل مع أزرار البريد الإلكتروني\n# ===========================\nasync def handle_email_inbox_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    query = update.callback_query\n    data = query.data\n    await query.answer()\n    print(\"📩 CALLBACK DATA:\", repr(data))\n\n    if data == \"email_connect_google\":\n        await start_google_auth(update, context)\n    elif data == \"inbox_back\":\n        from modules.inbox.inbox import show_inbox\n        await show_inbox(update, context)\n    else:\n        await query.answer(\"⚠️ هذا الخيار غير معروف أو قديم.\", show_alert=True)\n\n# ===========================\n# بدء الاتصال بحساب Google (رابط OAuth)\n# ===========================\nasync def start_google_auth(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    query = update.callback_query\n    if query:\n        await query.edit_message_text(\"🔑 جاري إعداد الاتصال بحساب Google...\")\n\n    try:\n        flow = InstalledAppFlow.from_client_config(CLIENT_CONFIG, SCOPES)\n        auth_url, _ = flow.authorization_url(prompt='consent')\n\n        text = (\n            \"🔗 لربط حساب Google مع البوت، افتح الرابط التالي في أي متصفح:\\n\\n\"\n            f\"{auth_url}\\n\\n\"\n            \"بعد تسجيل الدخول، انسخ الكود بالكامل وأرسله هنا.\"\n        )\n\n        keyboard = [[InlineKeyboardButton(\"↩️ العودة\", callback_data=\"inbox_back\")]]\n        reply_markup = InlineKeyboardMarkup(keyboard)\n\n        # إرسال النص بدون Markdown لتجنب مشاكل الروابط\n        await query.edit_message_text(text=text, reply_markup=reply_markup)\n\n        # حفظ flow في context لاستخدامه عند إدخال الكود\n        context.user_data['google_flow'] = flow\n\n    except Exception as e:\n        if query:\n            await query.edit_message_text(f\"❌ فشل إعداد الاتصال بحساب Google:\\n\\n{e}\")\n\n# ===========================\n# استلام الكود من المستخدم\n# ===========================\nasync def finish_google_auth(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    if 'google_flow' not in context.user_data:\n        await update.message.reply_text(\"⚠️ لم يتم بدء عملية الاتصال بحساب Google، اضغط الزر أولاً.\")\n        return\n\n    flow = context.user_data['google_flow']\n    code = update.message.text.strip()\n\n    try:\n        flow.fetch_token(code=code)\n        creds = flow.credentials\n\n        # حفظ الاتصال\n        with open(TOKEN_PATH, 'wb') as token:\n            pickle.dump(creds, token)\n\n        await update.message.reply_text(\"✅ تم الاتصال بحساب Google بنجاح!\\nجارٍ سحب آخر 10 رسائل...\")\n\n        await pull_last_10_emails(update, context, creds)\n\n    except Exception as e:\n        await update.message.reply_text(f\"❌ فشل الاتصال بحساب Google:\\n\\n{e}\")\n\n# ===========================\n# سحب آخر 10 رسائل Gmail\n# ===========================\nasync def pull_last_10_emails(update: Update, context: ContextTypes.DEFAULT_TYPE, creds):\n    try:\n        service = build('gmail', 'v1', credentials=creds)\n        results = service.users().messages().list(userId='me', maxResults=10).execute()\n        messages = results.get('messages', [])\n\n        if not messages:\n            if update.callback_query:\n                await update.callback_query.edit_message_text(\"📭 لا توجد رسائل في البريد.\")\n            else:\n                await update.message.reply_text(\"📭 لا توجد رسائل في البريد.\")\n            return\n\n        emails = []\n        for msg in messages:\n            msg_data = service.users().messages().get(userId='me', id=msg['id']).execute()\n            headers = msg_data.get('payload', {}).get('headers', [])\n            subject = next((h['value'] for h in headers if h['name'] == 'Subject'), 'بدون عنوان')\n            sender = next((h['value'] for h in headers if h['name'] == 'From'), 'غير معروف')\n            emails.append({'From': sender, 'Subject': subject})\n\n        # حفظ في CSV\n        with open(\"emails.csv\", \"w\", newline='', encoding=\"utf-8\") as f:\n            writer = csv.DictWriter(f, fieldnames=[\"From\", \"Subject\"])\n            writer.writeheader()\n            writer.writerows(emails)\n\n        # عرض النتائج\n        text = \"✅ تم سحب آخر 10 رسائل:\\n\\n\"\n        for i, email in enumerate(emails, start=1):\n            text += f\"{i}. {email['From']} — {email['Subject']}\\n\"\n        text += \"\\n📁 تم حفظها أيضًا في ملف emails.csv\"\n\n        keyboard = [[InlineKeyboardButton(\"↩️ العودة\", callback_data=\"inbox_back\")]]\n        reply_markup = InlineKeyboardMarkup(keyboard)\n\n        if update.callback_query:\n            await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup)\n        else:\n            await update.message.reply_text(text=text, reply_markup=reply_markup)\n\n    except Exception as e:\n        if update.callback_query:\n            await update.callback_query.edit_message_text(f\"❌ حدث خطأ أثناء جلب الرسائل:\\n\\n{e}\")\n        else:\n            await update.message.reply_text(f\"❌ حدث خطأ أثناء جلب الرسائل:\\n\\n{e}\")\n","size_bytes":7279},"token.sh":{"content":"export SMART_SCHEDULER_TOKEN=\"8402278212:AAFmTWzAtrvF9SOy9sdwduz1LmNrT_oqHmo\"\nexport GOOGLE_CLIENT_ID=\"1015270124270-fg53ehvs093roual651kppfq5rpmm56t.apps.googleusercontent.com\"\nexport GOOGLE_CLIENT_SECRET=\"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\"\n","size_bytes":244},"modules/level/level.py":{"content":"from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update\nfrom telegram.ext import ContextTypes\n\nasync def show_level(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    text = \"🎯 *مستواي الشخصي*\\nهنا يمكنك معرفة تقدمك العام بناءً على نشاطاتك داخل النظام.\"\n    keyboard = [\n        [InlineKeyboardButton(\"📈 عرض المستوى\", callback_data=\"level_view\")],\n        [InlineKeyboardButton(\"🏆 كيف أرفع مستواي؟\", callback_data=\"level_tips\")],\n        [InlineKeyboardButton(\"↩️ العودة\", callback_data=\"main_menu\")]\n    ]\n    markup = InlineKeyboardMarkup(keyboard)\n\n    if update.callback_query:\n        await update.callback_query.edit_message_text(text=text, reply_markup=markup, parse_mode=\"Markdown\")\n    else:\n        await update.message.reply_text(text, reply_markup=markup, parse_mode=\"Markdown\")\n\nasync def handle_level_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    query = update.callback_query\n    data = query.data\n\n    if data == \"level_view\":\n        await query.edit_message_text(\"📊 مستواك الحالي: المستوى 3 (Intermediate)\")\n    elif data == \"level_tips\":\n        await query.edit_message_text(\"💡 يمكنك رفع مستواك عبر استخدام أقسام التتبع يوميًا!\")\n    else:\n        await query.edit_message_text(\"⚠️ خيار غير معروف في المستويات.\")\n","size_bytes":1472},"modules/tracker/tracker.py":{"content":"from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update\nfrom telegram.ext import ContextTypes\n\nasync def show_tracker(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    text = \"📈 *نظام التتبع*\\nهنا يمكنك متابعة أداءك ونشاطاتك اليومية.\"\n    keyboard = [\n        [InlineKeyboardButton(\"📅 تتبع جديد\", callback_data=\"tracker_new\")],\n        [InlineKeyboardButton(\"📊 عرض التتبع الحالي\", callback_data=\"tracker_view\")],\n        [InlineKeyboardButton(\"↩️ العودة\", callback_data=\"main_menu\")]\n    ]\n    markup = InlineKeyboardMarkup(keyboard)\n\n    if update.callback_query:\n        await update.callback_query.edit_message_text(text=text, reply_markup=markup, parse_mode=\"Markdown\")\n    else:\n        await update.message.reply_text(text, reply_markup=markup, parse_mode=\"Markdown\")\n\nasync def handle_tracker_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    query = update.callback_query\n    data = query.data\n\n    if data == \"tracker_new\":\n        await query.edit_message_text(\"🆕 جاري إنشاء سجل تتبع جديد...\")\n    elif data == \"tracker_view\":\n        await query.edit_message_text(\"📊 هذه بيانات التتبع الحالية...\")\n    else:\n        await query.edit_message_text(\"⚠️ خيار غير معروف في التتبع.\")\n","size_bytes":1387},"modules/add_post/add_post.py":{"content":"from telegram import InlineKeyboardButton, InlineKeyboardMarkup\n\n# --- عرض قائمة إضافة منشور ---\nasync def show_add_post(update, context):\n    text = \"📰 *نشر منشور جديد*\\nاختر نوع المنشور الذي تريد إضافته:\"\n    keyboard = [\n        [InlineKeyboardButton(\"📝 نص فقط\", callback_data=\"post_text\")],\n        [InlineKeyboardButton(\"📸 صورة مع نص\", callback_data=\"post_image\")],\n        [InlineKeyboardButton(\"🎥 فيديو مع نص\", callback_data=\"post_video\")],\n        [InlineKeyboardButton(\"↩️ العودة\", callback_data=\"main_menu\")]\n    ]\n    reply_markup = InlineKeyboardMarkup(keyboard)\n\n    if update.message:\n        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=\"Markdown\")\n    elif update.callback_query:\n        await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode=\"Markdown\")\n\n\n# --- التعامل مع الخيارات الفرعية لإضافة منشور ---\nasync def handle_add_post_selection(update, context):\n    query = update.callback_query\n    data = query.data\n\n    if data == \"post_text\":\n        text = \"📝 *إضافة منشور نصي*\\nاكتب النص الذي تريد نشره (ميزة افتراضية حالياً).\"\n    elif data == \"post_image\":\n        text = \"📸 *إضافة منشور بصورة*\\nارفق الصورة والنص (ميزة افتراضية حالياً).\"\n    elif data == \"post_video\":\n        text = \"🎥 *إضافة منشور فيديو*\\nارفق الفيديو والنص (ميزة افتراضية حالياً).\"\n    elif data == \"main_menu\":\n        from bot import show_main_menu\n        await show_main_menu(update, context)\n        return\n    else:\n        text = \"🚧 هذا الخيار في طور التحسين\"\n\n    await query.edit_message_text(text=text, parse_mode=\"Markdown\")\n","size_bytes":1920},"modules/custom_reply/add.py":{"content":"import json\nimport os\nfrom telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update\nfrom telegram.ext import ContextTypes\n\n# ملف JSON لتخزين الردود\nDATA_FILE = \"modules/custom_reply/custom_replies.json\"\n\n# إنشاء الملف إذا لم يكن موجودًا\nos.makedirs(os.path.dirname(DATA_FILE), exist_ok=True)\nif not os.path.exists(DATA_FILE):\n    with open(DATA_FILE, \"w\", encoding=\"utf-8\") as f:\n        json.dump([], f, ensure_ascii=False, indent=2)\n\n\n# ====== الصفحة الأولى ======\nasync def reply_add_page(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    \"\"\"عرض صفحة البداية لإضافة رد\"\"\"\n    query = update.callback_query\n    await query.edit_message_text(\"📝 أرسل الكلمة المفتاحية التي تريد الرد عليها:\")\n    context.user_data[\"state\"] = \"await_keyword\"\n\n\n# ====== استقبال الرسائل ======\nasync def handle_add_reply_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    \"\"\"التعامل مع الرسائل أثناء الإضافة\"\"\"\n    text = update.message.text.strip()\n    state = context.user_data.get(\"state\")\n\n    # الخطوة 1: الكلمة المفتاحية\n    if state == \"await_keyword\":\n        context.user_data[\"keyword\"] = text\n        context.user_data[\"state\"] = \"await_response\"\n        await update.message.reply_text(\"💬 أرسل الآن الرد الذي تريد أن يرسله البوت:\")\n        return\n\n    # الخطوة 2: الرد\n    elif state == \"await_response\":\n        context.user_data[\"response\"] = text\n        context.user_data[\"state\"] = \"await_scope\"\n\n        keyboard = [\n            [\n                InlineKeyboardButton(\"👥 المجموعات\", callback_data=\"scope_group\"),\n                InlineKeyboardButton(\"👤 الدردشات الخاصة\", callback_data=\"scope_private\"),\n            ]\n        ]\n        await update.message.reply_text(\n            \"🌍 اختر مكان تفعيل الرد:\",\n            reply_markup=InlineKeyboardMarkup(keyboard),\n        )\n        return\n\n\n# ====== استقبال نوع النطاق ======\nasync def handle_add_reply_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    \"\"\"التعامل مع ضغط الأزرار أثناء الإضافة\"\"\"\n    query = update.callback_query\n    data = query.data\n\n    if data in [\"scope_group\", \"scope_private\"]:\n        scope = \"group\" if data == \"scope_group\" else \"private\"\n        context.user_data[\"scope\"] = scope\n\n        # حفظ الرد مباشرة\n        await save_reply(query, context)\n\n    elif data == \"reply_manage_home\":\n        # العودة إلى صفحة إدارة الردود\n        from .custom_reply import show_custom_reply\n        await show_custom_reply(update, context)\n\n    else:\n        await query.answer(\"🚧 خيار غير معروف\")\n\n\n# ====== حفظ الرد ======\nasync def save_reply(query, context):\n    \"\"\"حفظ الرد في ملف JSON\"\"\"\n    keyword = context.user_data.get(\"keyword\")\n    response = context.user_data.get(\"response\")\n    scope = context.user_data.get(\"scope\")\n\n    if not (keyword and response and scope):\n        await query.edit_message_text(\"⚠️ البيانات غير مكتملة، أعد المحاولة.\")\n        return\n\n    # تحميل البيانات الحالية\n    with open(DATA_FILE, \"r\", encoding=\"utf-8\") as f:\n        replies = json.load(f)\n\n    replies.append({\n        \"keyword\": keyword,\n        \"response\": response,\n        \"scope\": scope\n    })\n\n    with open(DATA_FILE, \"w\", encoding=\"utf-8\") as f:\n        json.dump(replies, f, ensure_ascii=False, indent=2)\n\n    await query.edit_message_text(\n        f\"✅ تم حفظ الرد بنجاح!\\n\\n📄 عدد الردود الآن: {len(replies)}\",\n        reply_markup=InlineKeyboardMarkup([\n            [InlineKeyboardButton(\"↩️ العودة\", callback_data=\"reply_manage_home\")]\n        ])\n    )\n    context.user_data.clear()\n","size_bytes":3990},"README.md":{"content":"# Smart-Social-Scheduler\n","size_bytes":25},"em_read.py":{"content":"import os\nimport pickle\nimport base64\nfrom googleapiclient.discovery import build\nfrom google_auth_oauthlib.flow import InstalledAppFlow\nfrom google.auth.transport.requests import Request\n\n# نطاق القراءة فقط\nSCOPES = ['https://www.googleapis.com/auth/gmail.readonly']\n\n# ضع هنا بياناتك من Google Cloud\nCLIENT_ID = \"1015270124270-a8v1ujjtq41e82vjj4l3tli5e949ftkl.apps.googleusercontent.com\"\nCLIENT_SECRET = \"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ضع_هنا_client_secret_الخاص_بك\"\n\ndef get_gmail_service():\n    creds = None\n    if os.path.exists('token.pickle'):\n        with open('token.pickle', 'rb') as token:\n            creds = pickle.load(token)\n\n    if not creds or not creds.valid:\n        if creds and creds.expired and creds.refresh_token:\n            creds.refresh(Request())\n        else:\n            client_config = {\n                \"installed\": {\n                    \"client_id\": CLIENT_ID,\n                    \"client_secret\": CLIENT_SECRET,\n                    \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n                    \"token_uri\": \"https://oauth2.googleapis.com/token\",\n                    \"redirect_uris\": [\"http://localhost:8080/\"]\n                }\n            }\n            flow = InstalledAppFlow.from_client_config(client_config, SCOPES)\n            creds = flow.run_local_server(port=8080)\n        with open('token.pickle', 'wb') as token:\n            pickle.dump(creds, token)\n\n    return build('gmail', 'v1', credentials=creds)\n\n\ndef list_emails():\n    service = get_gmail_service()\n    results = service.users().messages().list(userId='me', maxResults=5).execute()\n    messages = results.get('messages', [])\n\n    if not messages:\n        print('لا توجد رسائل.')\n        return\n\n    for msg in messages:\n        msg_data = service.users().messages().get(userId='me', id=msg['id']).execute()\n        snippet = msg_data.get('snippet', '')\n        print(f\"📧 {snippet[:100]}\")\n\n\nif __name__ == '__main__':\n    list_emails()\n","size_bytes":2012},"modules/custom_reply/custom_reply.py":{"content":"from telegram import InlineKeyboardButton, InlineKeyboardMarkup\n\n# استدعاء الدوال من الصفحات الفرعية\nfrom .view import show_reply_page\nfrom .add import reply_add_page, handle_add_reply_messages, handle_add_reply_callbacks\nfrom .edit import edit_reply_page\n\n# ================================\n# 📩 القائمة الرئيسية للردود التلقائية\n# ================================\nasync def show_custom_reply(update, context):\n    text = \"💬 *الردود التلقائية*\\nاختر الإجراء الذي تريد القيام به:\"\n    keyboard = [\n        [InlineKeyboardButton(\"📩 عرض الردود الحالية\", callback_data=\"reply_show_page\")],\n        [InlineKeyboardButton(\"➕ إضافة رد جديد\", callback_data=\"reply_add_page\")],\n        [InlineKeyboardButton(\"✏️ تعديل رد موجود\", callback_data=\"reply_edit_page\")],\n        [InlineKeyboardButton(\"↩️ العودة\", callback_data=\"main_menu\")]\n    ]\n    reply_markup = InlineKeyboardMarkup(keyboard)\n\n    if update.message:\n        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=\"Markdown\")\n    elif update.callback_query:\n        await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode=\"Markdown\")\n\n\n# ================================\n# 🧭 التحكم بالتنقل بين الصفحات والزر الديناميكي\n# ================================\nasync def handle_custom_reply_selection(update, context):\n    query = update.callback_query\n    data = query.data\n\n    # --- عرض الردود ---\n    if data == \"reply_show_page\":\n        await show_reply_page(update, context)\n\n    # --- صفحة إضافة الرد ---\n    elif data == \"reply_add_page\":\n        await reply_add_page(update, context)\n\n    # --- بدء إدخال الرد الجديد (زر داخل صفحة add) ---\n    elif data == \"start_add_reply\":\n        await start_add_reply(update, context)\n\n    # --- تعديل الرد ---\n    elif data == \"reply_edit_page\":\n        await edit_reply_page(update, context)\n\n    # --- العودة للقائمة الرئيسية ---\n    elif data == \"reply_back_main\":\n        await show_custom_reply(update, context)\n\n    # --- العودة للصفحة الرئيسية للبوت ---\n    elif data == \"main_menu\":\n        from bot import show_main_menu\n        await show_main_menu(update, context)\n\n    else:\n        await query.edit_message_text(text=\"🚧 هذا الخيار غير معروف.\", parse_mode=\"Markdown\")\n","size_bytes":2568},"modules/inbox/inbox.py":{"content":"from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update\nfrom modules.inbox.all_inbox import show_all_inbox\nfrom modules.inbox.email_inbox import show_email_inbox\nfrom modules.inbox.telegram_inbox import show_telegram_inbox\n\n# ===========================\n# عرض القائمة الرئيسية للبريد الوارد\n# ===========================\nasync def show_inbox(update: Update, context):\n    text = \"📥 *البريد الوارد*\\nاختر القسم الذي تريد عرضه:\"\n    keyboard = [\n        [InlineKeyboardButton(\"📋 كل الرسائل\", callback_data=\"inbox_all\")],\n        [InlineKeyboardButton(\"✉️ رسائل البريد الإلكتروني\", callback_data=\"inbox_email\")],\n        [InlineKeyboardButton(\"💬 رسائل التليجرام\", callback_data=\"inbox_telegram\")],\n        [InlineKeyboardButton(\"↩️ العودة\", callback_data=\"main_menu\")]\n    ]\n    reply_markup = InlineKeyboardMarkup(keyboard)\n\n    if update.message:\n        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=\"Markdown\")\n    elif update.callback_query:\n        await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode=\"Markdown\")\n\n# ===========================\n# التعامل مع أزرار البريد الوارد\n# ===========================\nasync def handle_inbox_selection(update: Update, context):\n    query = update.callback_query\n    data = query.data\n    await query.answer()\n\n    if data == \"inbox_all\":\n        await show_all_inbox(update, context)\n\n    elif data == \"inbox_email\":\n        await show_email_inbox(update, context)\n\n    elif data == \"inbox_telegram\":\n        await show_telegram_inbox(update, context)\n\n    elif data == \"show_inbox\":\n        await show_inbox(update, context)\n\n    elif data == \"main_menu\":\n        # استدعاء داخلي لتجنب circular import\n        from modules.main_menu import show_main_menu\n        await show_main_menu(update, context)\n\n    else:\n        # أي خيار آخر غير معروف\n        await query.answer(\"🚧 هذا القسم في طور التحسين\", show_alert=True)\n","size_bytes":2162},"modules/custom_reply/view.py":{"content":"from telegram import InlineKeyboardButton, InlineKeyboardMarkup\n\nasync def show_reply_page(update, context):\n    text = (\n        \"📋 *الردود الحالية:*\\n\"\n        \"─────────────────────────\\n\"\n        \"1️⃣ مرحبًا! كيف يمكنني مساعدتك اليوم؟\\n\"\n        \"2️⃣ شكرًا لتواصلك معنا، سنرد عليك قريبًا.\\n\"\n        \"3️⃣ تم تسجيل طلبك وسيتم معالجته.\"\n    )\n    keyboard = [\n        [InlineKeyboardButton(\"↩️ العودة\", callback_data=\"reply_back_main\")]\n    ]\n    await update.callback_query.edit_message_text(\n        text=text,\n        reply_markup=InlineKeyboardMarkup(keyboard),\n        parse_mode=\"Markdown\"\n    )\n","size_bytes":774},"modules/ai_assistant/ai_assistant.py":{"content":"from telegram import InlineKeyboardButton, InlineKeyboardMarkup\n\n# --- عرض قائمة المساعد الذكي ---\nasync def show_ai_assistant(update, context):\n    text = \"🤖 *المساعد الذكي*\\nاختر الخدمة التي تريد استخدامها:\"\n    keyboard = [\n        [InlineKeyboardButton(\"💡 اقتراح أفكار\", callback_data=\"ai_ideas\")],\n        [InlineKeyboardButton(\"✍️ كتابة محتوى\", callback_data=\"ai_write\")],\n        [InlineKeyboardButton(\"📊 تحليل بيانات\", callback_data=\"ai_analyze\")],\n        [InlineKeyboardButton(\"↩️ العودة\", callback_data=\"main_menu\")]\n    ]\n    reply_markup = InlineKeyboardMarkup(keyboard)\n\n    if update.message:\n        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=\"Markdown\")\n    elif update.callback_query:\n        await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode=\"Markdown\")\n\n\n# --- التعامل مع الخيارات الفرعية للمساعد الذكي ---\nasync def handle_ai_assistant_selection(update, context):\n    query = update.callback_query\n    data = query.data\n\n    if data == \"ai_ideas\":\n        text = (\n            \"💡 *اقتراح أفكار*\\n\"\n            \"يمكنك طلب اقتراح أفكار لمشاريع، محتوى، أو حلول لمشاكل معينة.\\n\"\n            \"_مثال: اعطني 5 أفكار لمشروع رقمي._\"\n        )\n    elif data == \"ai_write\":\n        text = (\n            \"✍️ *كتابة محتوى*\\n\"\n            \"يمكنك طلب كتابة نصوص، مقالات، منشورات أو رسائل جاهزة.\\n\"\n            \"_مثال: اكتب منشور تحفيزي حول إدارة الوقت._\"\n        )\n    elif data == \"ai_analyze\":\n        text = (\n            \"📊 *تحليل بيانات*\\n\"\n            \"يمكنك إدخال بيانات لتلقي تحليل أو ملخص افتراضي.\\n\"\n            \"_مثال: حلل أداء آخر منشورات الأسبوع._\"\n        )\n    elif data == \"main_menu\":\n        from bot import show_main_menu\n        await show_main_menu(update, context)\n        return\n    else:\n        text = \"🚧 هذا الخيار في طور التحسين\"\n\n    await query.edit_message_text(text=text, parse_mode=\"Markdown\")\n","size_bytes":2343},"modules/inbox/all_inbox.py":{"content":"from telegram import InlineKeyboardButton, InlineKeyboardMarkup\n\nasync def show_all_inbox(update, context):\n    text = (\n        \"📋 *كل الرسائل*\\n\"\n        \"─────────────────────────\\n\"\n        \"1️⃣ رسالة من أحمد: مرحبًا، كيف حالك؟\\n\"\n        \"2️⃣ رسالة من سارة: هل يمكننا التحدث عن المشروع؟\\n\"\n        \"3️⃣ رسالة من فريق الدعم: تم حل مشكلتك.\"\n    )\n\n    keyboard = [[InlineKeyboardButton(\"↩️ العودة\", callback_data=\"show_inbox\")]]\n    reply_markup = InlineKeyboardMarkup(keyboard)\n\n    if update.callback_query:\n        await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode=\"Markdown\")\n    elif update.message:\n        await update.message.reply_text(text=text, reply_markup=reply_markup, parse_mode=\"Markdown\")\n","size_bytes":925},"config.py":{"content":"# config.py\nimport os\n\nBOT_TOKEN = os.getenv(\"BOT_TOKEN\", \"8402278212:AAFmTWzAtrvF9SOy9sdwduz1LmNrT_oqHmo\")\nPROJECT_NAME = \"Smart Social Scheduler\"\n\nMESSAGES = {\n    \"welcome\": (\n        \"👋 مرحباً بك في *Smart Social Scheduler!*\\n\\n\"\n        \"نظام ذكي لإدارة محتواك وجدولة منشوراتك ومتابعة أداءك.\\n\\n\"\n        \"اختر من القائمة أدناه القسم الذي ترغب بفتحه 👇\"\n    ),\n    \"back\": \"⬅️ رجوع إلى القائمة السابقة\",\n    \"not_ready\": \"🚧 هذا القسم في طور التحسين لاحقًا.\",\n}\n","size_bytes":616},"modules/custom_reply/edit.py":{"content":"from telegram import InlineKeyboardButton, InlineKeyboardMarkup\n\nasync def edit_reply_page(update, context):\n    text = (\n        \"✏️ *تعديل رد موجود*\\n\"\n        \"اختر رقم الرد الذي تريد تعديله من القائمة التالية:\\n\\n\"\n        \"1️⃣ مرحبًا! كيف يمكنني مساعدتك اليوم؟\\n\"\n        \"2️⃣ شكرًا لتواصلك معنا، سنرد عليك قريبًا.\\n\"\n        \"3️⃣ تم تسجيل طلبك وسيتم معالجته.\"\n    )\n    keyboard = [\n        [InlineKeyboardButton(\"↩️ العودة\", callback_data=\"reply_back_main\")]\n    ]\n    await update.callback_query.edit_message_text(\n        text=text,\n        reply_markup=InlineKeyboardMarkup(keyboard),\n        parse_mode=\"Markdown\"\n    )\n","size_bytes":792},"modules/settings/settings.py":{"content":"import os\nimport json\nfrom telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update\nfrom telegram.ext import ContextTypes\n\n# --- تحميل الترجمة ---\nJSON_PATH = os.path.join(os.path.dirname(__file__), \"..\", \"translations.json\")\n\ndef load_translations():\n    if os.path.exists(JSON_PATH):\n        with open(JSON_PATH, \"r\", encoding=\"utf-8\") as f:\n            return json.load(f)\n    else:\n        return {\n            \"ar\": {\n                \"settings_title\": \"⚙️ الإعدادات\",\n                \"choose_option\": \"اختر أحد الإعدادات التالية:\",\n                \"notifications\": \"الإشعارات والتنبيهات\",\n                \"auto_replies\": \"الردود التلقائية\",\n                \"language\": \"اللغة\",\n                \"back\": \"⬅️ عودة\"\n            },\n            \"en\": {\n                \"settings_title\": \"⚙️ Settings\",\n                \"choose_option\": \"Choose one of the following:\",\n                \"notifications\": \"Notifications & Alerts\",\n                \"auto_replies\": \"Auto Replies\",\n                \"language\": \"Language\",\n                \"back\": \"⬅️ Back\"\n            }\n        }\n\ntranslations = load_translations()\nDEFAULT_LANG = \"ar\"\n\ndef get_user_language(update: Update) -> str:\n    # مستقبلاً يمكن تخزين اللغة في قاعدة بيانات\n    return DEFAULT_LANG\n\n\n# --- عرض قائمة الإعدادات ---\nasync def show_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    lang = get_user_language(update)\n    t = translations.get(lang, translations[DEFAULT_LANG])\n\n    text = f\"{t['settings_title']}\\n\\n{t['choose_option']}\"\n\n    keyboard = [\n        [InlineKeyboardButton(t[\"notifications\"], callback_data=\"settings_notifications\")],\n        [InlineKeyboardButton(t[\"auto_replies\"], callback_data=\"settings_auto_replies\")],\n        [InlineKeyboardButton(t[\"language\"], callback_data=\"settings_language\")],\n        [InlineKeyboardButton(t[\"back\"], callback_data=\"back_main\")]\n    ]\n\n    reply_markup = InlineKeyboardMarkup(keyboard)\n\n    if update.message:\n        # إذا كان من أمر /settings\n        await update.message.reply_text(text, reply_markup=reply_markup)\n    elif update.callback_query:\n        # إذا كان من زر داخل البوت\n        await update.callback_query.message.edit_text(text, reply_markup=reply_markup)\n\n\n# --- التعامل مع اختيارات المستخدم داخل الإعدادات ---\nasync def handle_settings_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    query = update.callback_query\n    data = query.data\n\n    lang = get_user_language(update)\n    t = translations.get(lang, translations[DEFAULT_LANG])\n\n    if data == \"settings_notifications\":\n        await query.message.edit_text(f\"🔔 {t['notifications']} — لم يتم تفعيلها بعد.\")\n    elif data == \"settings_auto_replies\":\n        await query.message.edit_text(f\"🤖 {t['auto_replies']} — لم يتم إعدادها بعد.\")\n    elif data == \"settings_language\":\n        # عرض خيارات اللغة\n        keyboard = [\n            [InlineKeyboardButton(\"العربية 🇸🇦\", callback_data=\"lang_ar\")],\n            [InlineKeyboardButton(\"English 🇬🇧\", callback_data=\"lang_en\")],\n            [InlineKeyboardButton(t[\"back\"], callback_data=\"settings_back\")]\n        ]\n        await query.message.edit_text(f\"{t['language']}:\", reply_markup=InlineKeyboardMarkup(keyboard))\n    elif data == \"settings_back\" or data == \"back_main\":\n        from bot import show_main_menu\n        await show_main_menu(update, context)\n    elif data.startswith(\"lang_\"):\n        chosen_lang = data.split(\"_\")[1]\n        await query.answer(f\"✅ Language set to {'العربية' if chosen_lang == 'ar' else 'English'}\", show_alert=True)\n        await show_settings(update, context)\n    else:\n        await query.answer(\"❗ خيار غير معروف\", show_alert=True)\n","size_bytes":3970},"modules/dashboard/dashboard.py":{"content":"from telegram import InlineKeyboardButton, InlineKeyboardMarkup\n\n# --- عرض لوحة الداشبورد ---\nasync def show_dashboard(update, context):\n    text = \"📊 مرحباً بك في لوحة التحكم!\\nاختر نوع الإحصائيات التي تريد عرضها:\"\n    keyboard = [\n        [InlineKeyboardButton(\"📊 إحصائيات عامة\", callback_data=\"stats_general\")],\n        [InlineKeyboardButton(\"📅 النشاط الأسبوعي\", callback_data=\"stats_weekly\")],\n        [InlineKeyboardButton(\"🚀 الأداء الأخير\", callback_data=\"stats_recent\")],\n        [InlineKeyboardButton(\"↩️ العودة\", callback_data=\"main_menu\")]\n    ]\n    reply_markup = InlineKeyboardMarkup(keyboard)\n\n    # دعم كلا الحالتين: رسالة جديدة أو زر\n    if update.message:\n        await update.message.reply_text(text, reply_markup=reply_markup)\n    elif update.callback_query:\n        await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup)\n\n# --- التعامل مع الأزرار الفرعية للداشبورد ---\nasync def handle_dashboard_selection(update, context):\n    query = update.callback_query\n    data = query.data\n\n    if data == \"stats_general\":\n        text = (\n            \"📊 *الإحصائيات العامة*\\n\"\n            \"─────────────────────────\\n\"\n            \"👥 عدد المستخدمين: 1,245\\n\"\n            \"🗓️ المنشورات المجدولة: 328\\n\"\n            \"💬 الردود التلقائية: 58\\n\"\n            \"⏰ آخر تحديث: اليوم\"\n        )\n    elif data == \"stats_weekly\":\n        text = (\n            \"📅 *النشاط الأسبوعي*\\n\"\n            \"─────────────────────────\\n\"\n            \"السبت: 12 منشور\\n\"\n            \"الأحد: 8 منشورات\\n\"\n            \"الإثنين: 14 منشور\\n\"\n            \"الثلاثاء: 6 منشورات\\n\"\n            \"الأربعاء: 10 منشورات\\n\"\n            \"الخميس: 7 منشورات\\n\"\n            \"الجمعة: 5 منشورات\"\n        )\n    elif data == \"stats_recent\":\n        text = (\n            \"🚀 *أداء آخر أسبوع*\\n\"\n            \"─────────────────────────\\n\"\n            \"📈 معدل التفاعل: +14%\\n\"\n            \"💡 أفضل منشور: 'نصائح لإدارة الوقت'\\n\"\n            \"⭐ متوسط الإعجابات: 230\\n\"\n            \"💬 متوسط التعليقات: 45\"\n        )\n    elif data == \"go_back_main\" or data == \"main_menu\":\n        from bot import show_main_menu\n        await show_main_menu(update, context)\n        return\n    else:\n        text = \"🚧 هذا القسم في طور التحسين\"\n\n    # تحديث الرسالة في حال كان الضغط من زر\n    await query.edit_message_text(text=text, parse_mode=\"Markdown\")\n","size_bytes":2996},"bot.py":{"content":"import os\nimport logging\nfrom telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup\nfrom telegram.ext import (\n    ApplicationBuilder,\n    CommandHandler,\n    CallbackQueryHandler,\nMessageHandler,\n    ContextTypes,\nfilters\n)\n\n# ---------------------------\n# استيراد الأقسام\n# ---------------------------\nfrom modules.dashboard.dashboard import show_dashboard\nfrom modules.inbox.inbox import show_inbox, handle_inbox_selection\nfrom modules.custom_reply.custom_reply import show_custom_reply, handle_custom_reply_selection\nfrom modules.custom_reply.add import handle_add_reply_messages, handle_add_reply_callbacks, reply_add_page\nfrom modules.add_post.add_post import show_add_post, handle_add_post_selection\nfrom modules.settings.settings import show_settings, handle_settings_selection\nfrom modules.events.events import show_events, handle_events_selection\nfrom modules.ai_assistant.ai_assistant import show_ai_assistant, handle_ai_assistant_selection\nfrom modules.inbox.email_inbox import handle_email_inbox_callback\nfrom modules.inbox.telegram_inbox import show_telegram_inbox\n\n# 🆕 الأقسام الجديدة\nfrom modules.tracker.tracker import show_tracker, handle_tracker_selection\nfrom modules.level.level import show_level, handle_level_selection\nfrom modules.reports.reports import show_reports, handle_reports_selection\n\n# ---------------------------\n# إعدادات logging\n# ---------------------------\nlogging.basicConfig(\n    format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n    level=logging.INFO\n)\n\n# ===========================\n# القائمة الرئيسية\n# ===========================\nasync def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    text = \"🏠 *القائمة الرئيسية - Smart Social Scheduler*\\nاختر القسم:\"\n    keyboard = [\n        [InlineKeyboardButton(\"📊 Dashboard\", callback_data=\"dashboard\")],\n        [InlineKeyboardButton(\"📥 Inbox\", callback_data=\"inbox\")],\n        [InlineKeyboardButton(\"💬 الردود التلقائية\", callback_data=\"custom_reply\")],\n        [InlineKeyboardButton(\"📰 Add Post\", callback_data=\"add_post\")],\n        [InlineKeyboardButton(\"⚙️ Settings\", callback_data=\"settings\")],\n        [InlineKeyboardButton(\"🗓️ Events\", callback_data=\"events\")],\n        [InlineKeyboardButton(\"🤖 AI Assistant\", callback_data=\"ai_assistant\")],\n        [InlineKeyboardButton(\"📈 Tracker\", callback_data=\"tracker\")],\n        [InlineKeyboardButton(\"🎯 مستواي\", callback_data=\"level\")],\n        [InlineKeyboardButton(\"📑 التقارير\", callback_data=\"reports\")]\n    ]\n    reply_markup = InlineKeyboardMarkup(keyboard)\n\n    try:\n        if update.message:\n            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=\"Markdown\")\n        elif update.callback_query:\n            await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode=\"Markdown\")\n    except Exception as e:\n        logging.warning(f\"تعذر تحديث القائمة الرئيسية: {e}\")\n        try:\n            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=\"Markdown\")\n        except:\n            pass\n\n# ===========================\n# الأوامر الأساسية\n# ===========================\nasync def start(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    await show_main_menu(update, context)\n\n# ===========================\n# CallbackQueryHandler عام\n# ===========================\nasync def callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    query = update.callback_query\n    await query.answer()\n    data = query.data\n\n    try:\n        main_mapping = {\n            \"dashboard\": show_dashboard,\n            \"inbox\": show_inbox,\n            \"custom_reply\": show_custom_reply,\n            \"add_post\": show_add_post,\n            \"settings\": show_settings,\n            \"events\": show_events,\n            \"ai_assistant\": show_ai_assistant,\n            \"tracker\": show_tracker,\n            \"level\": show_level,\n            \"reports\": show_reports,\n            \"main_menu\": show_main_menu\n        }\n\n        if data in main_mapping:\n            await main_mapping[data](update, context)\n            return\n\n        # الأقسام الفرعية\n        if data.startswith(\"inbox_\"):\n            await handle_inbox_selection(update, context)\n        elif data.startswith(\"reply_\"):\n            await handle_custom_reply_selection(update, context)\n        elif data.startswith(\"post_\"):\n            await handle_add_post_selection(update, context)\n        elif data.startswith(\"settings_\"):\n            await handle_settings_selection(update, context)\n        elif data.startswith(\"events_\"):\n            await handle_events_selection(update, context)\n        elif data.startswith(\"ai_\"):\n            await handle_ai_assistant_selection(update, context)\n        elif data.startswith(\"tracker_\"):\n            await handle_tracker_selection(update, context)\n        elif data.startswith(\"level_\"):\n            await handle_level_selection(update, context)\n        elif data.startswith(\"reports_\"):\n            await handle_reports_selection(update, context)\n        else:\n            await query.edit_message_text(\"⚠️ هذا الخيار غير معروف أو قديم، يرجى اختيار خيار من القائمة.\")\n    except Exception as e:\n        logging.error(f\"حدث خطأ أثناء معالجة الأمر: {e}\")\n        try:\n            await query.edit_message_text(\"❌ حدث خطأ أثناء معالجة هذا الخيار.\")\n        except:\n            pass\n\n# ===========================\n# Main\n# ===========================\nif __name__ == \"__main__\":\n    TOKEN = os.environ.get(\"SMART_SCHEDULER_TOKEN\")\n    if not TOKEN:\n        raise ValueError(\"❌ لم يتم تعيين متغير البيئة SMART_SCHEDULER_TOKEN\")\n\n    app = ApplicationBuilder().token(TOKEN).build()\n\n    # ---------- Commands ----------\n    app.add_handler(CommandHandler(\"start\", start))\n\n    # ---------- CallbackQueryHandlers ----------\n    app.add_handler(CallbackQueryHandler(handle_email_inbox_callback, pattern=\"^email_\"))\n    app.add_handler(CallbackQueryHandler(show_telegram_inbox, pattern=\"^telegram_\"))\n    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_add_reply_messages))\n    app.add_handler(CallbackQueryHandler(handle_add_reply_callbacks, pattern=\"^scope_\"))\n#    app.add_handler(CallbackQueryHandler(handle_custom_reply_selection))\n\n\n\n    app.add_handler(CallbackQueryHandler(callbacks))\n\n    print(\"✅ Smart Social Scheduler يعمل الآن...\")\n    app.run_polling(allowed_updates=Update.ALL_TYPES)\n","size_bytes":6722},"modules/reports/reports.py":{"content":"from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update\nfrom telegram.ext import ContextTypes\n\nasync def show_reports(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    text = \"📑 *قسم التقارير*\\nهنا يمكنك استخراج تقارير كاملة عن نشاطك أو الأداء العام.\"\n    keyboard = [\n        [InlineKeyboardButton(\"📊 إنشاء تقرير أسبوعي\", callback_data=\"reports_weekly\")],\n        [InlineKeyboardButton(\"📅 تقرير شهري\", callback_data=\"reports_monthly\")],\n        [InlineKeyboardButton(\"↩️ العودة\", callback_data=\"main_menu\")]\n    ]\n    markup = InlineKeyboardMarkup(keyboard)\n\n    if update.callback_query:\n        await update.callback_query.edit_message_text(text=text, reply_markup=markup, parse_mode=\"Markdown\")\n    else:\n        await update.message.reply_text(text, reply_markup=markup, parse_mode=\"Markdown\")\n\nasync def handle_reports_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    query = update.callback_query\n    data = query.data\n\n    if data == \"reports_weekly\":\n        await query.edit_message_text(\"🗓️ جاري إنشاء تقرير أسبوعي...\")\n    elif data == \"reports_monthly\":\n        await query.edit_message_text(\"📆 جاري إنشاء تقرير شهري...\")\n    else:\n        await query.edit_message_text(\"⚠️ خيار غير معروف في التقارير.\")\n","size_bytes":1431},"modules/inbox/email_inbox.py":{"content":"# ================================\n# 📩 EMAIL INBOX MODULE (FINAL + HTML SAFE VERSION)\n# ================================\n\nfrom telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update\nfrom telegram.ext import ContextTypes\nimport os\nimport pickle\nimport csv\nimport html\nfrom google_auth_oauthlib.flow import InstalledAppFlow\nfrom googleapiclient.discovery import build\nfrom google.auth.transport.requests import Request\n\n# ---------------------------\n# إعدادات Google OAuth\n# ---------------------------\nSCOPES = ['https://www.googleapis.com/auth/gmail.readonly']\nTOKEN_PATH = \"token_gmail.pickle\"\n\nCLIENT_CONFIG = {\n    \"installed\": {\n        \"client_id\": os.getenv(\"GOOGLE_CLIENT_ID\"),\n        \"client_secret\": os.getenv(\"GOOGLE_CLIENT_SECRET\"),\n        \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n        \"token_uri\": \"https://oauth2.googleapis.com/token\",\n        \"redirect_uris\": [\"urn:ietf:wg:oauth:2.0:oob\"]\n    }\n}\n\n# ===========================\n# عرض واجهة البريد الإلكتروني\n# ===========================\nasync def show_email_inbox(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    text = (\n        \"✉️ <b>واجهة البريد الإلكتروني</b>\\n\"\n        \"───────────────\\n\"\n        \"اضغط الزر أدناه لاختيار حساب Google لعرض آخر الرسائل.\"\n    )\n\n    keyboard = [\n        [InlineKeyboardButton(\"🔑 الاتصال بحساب Google\", callback_data=\"email_connect_google\")],\n        [InlineKeyboardButton(\"↩️ العودة\", callback_data=\"inbox_back\")]\n    ]\n    reply_markup = InlineKeyboardMarkup(keyboard)\n\n    if update.callback_query:\n        await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode=\"HTML\")\n    elif update.message:\n        await update.message.reply_text(text=text, reply_markup=reply_markup, parse_mode=\"HTML\")\n\n# ===========================\n# التعامل مع الأزرار\n# ===========================\nasync def handle_email_inbox_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    query = update.callback_query\n    data = query.data\n    await query.answer()\n    print(\"📩 CALLBACK DATA:\", data)\n\n    if data == \"email_connect_google\":\n        await start_google_auth(update, context)\n    elif data == \"inbox_back\":\n        from modules.inbox.inbox import show_inbox\n        await show_inbox(update, context)\n    else:\n        await query.answer(\"⚠️ هذا الخيار غير معروف أو قديم.\", show_alert=True)\n\n# ===========================\n# بدء عملية الاتصال بحساب Google\n# ===========================\nasync def start_google_auth(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    query = update.callback_query\n    await query.edit_message_text(\"🔑 جاري إنشاء رابط الاتصال...\")\n\n    # إذا كان هناك توكن سابق وصالح\n    if os.path.exists(TOKEN_PATH):\n        with open(TOKEN_PATH, \"rb\") as token:\n            creds = pickle.load(token)\n        if creds and creds.valid:\n            await query.edit_message_text(\"✅ تم الاتصال مسبقًا! جاري سحب آخر 10 رسائل...\")\n            await pull_last_10_emails(update, context, creds)\n            return\n        elif creds and creds.expired and creds.refresh_token:\n            creds.refresh(Request())\n            with open(TOKEN_PATH, \"wb\") as token:\n                pickle.dump(creds, token)\n            await query.edit_message_text(\"♻️ تم تحديث الاتصال بنجاح! جاري سحب الرسائل...\")\n            await pull_last_10_emails(update, context, creds)\n            return\n\n    # إنشاء تدفق جديد في حال عدم وجود توكن\n    try:\n        flow = InstalledAppFlow.from_client_config(CLIENT_CONFIG, SCOPES)\n        auth_url, _ = flow.authorization_url(prompt='consent', access_type='offline')\n\n        # تأمين الرابط ضد مشاكل Markdown\n        safe_url = html.escape(auth_url)\n\n        text = (\n            \"🔗 <b>رابط الاتصال بحساب Google:</b>\\n\\n\"\n            f\"<a href=\\\"{safe_url}\\\">اضغط هنا لفتح الرابط</a>\\n\\n\"\n            \"بعد تسجيل الدخول:\\n\"\n            \"1️⃣ انسخ الكود الذي سيظهر لك.\\n\"\n            \"2️⃣ أرسله هنا في الدردشة.\\n\\n\"\n            \"📌 ملاحظة: البيانات آمنة ولن يتم حفظ أي معلومات غير ضرورية.\"\n        )\n\n        context.user_data[\"google_flow\"] = flow\n\n        keyboard = [[InlineKeyboardButton(\"↩️ العودة\", callback_data=\"inbox_back\")]]\n        await query.edit_message_text(text=text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=\"HTML\", disable_web_page_preview=True)\n\n    except Exception as e:\n        await query.edit_message_text(f\"❌ فشل إنشاء رابط الاتصال:\\n\\n{html.escape(str(e))}\")\n\n# ===========================\n# استقبال الكود من المستخدم\n# ===========================\nasync def finish_google_auth(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    if \"google_flow\" not in context.user_data:\n        await update.message.reply_text(\"⚠️ لم تبدأ عملية الاتصال بعد، اضغط الزر أولاً.\")\n        return\n\n    flow = context.user_data[\"google_flow\"]\n    code = update.message.text.strip()\n\n    try:\n        flow.fetch_token(code=code)\n        creds = flow.credentials\n\n        with open(TOKEN_PATH, \"wb\") as token:\n            pickle.dump(creds, token)\n\n        await update.message.reply_text(\"✅ تم الاتصال بنجاح! جاري سحب آخر 10 رسائل...\")\n        await pull_last_10_emails(update, context, creds)\n\n    except Exception as e:\n        await update.message.reply_text(f\"❌ فشل الاتصال بحساب Google:\\n\\n{e}\")\n\n# ===========================\n# سحب آخر 10 رسائل Gmail\n# ===========================\nasync def pull_last_10_emails(update: Update, context: ContextTypes.DEFAULT_TYPE, creds):\n    try:\n        service = build(\"gmail\", \"v1\", credentials=creds)\n        results = service.users().messages().list(userId=\"me\", maxResults=10).execute()\n        messages = results.get(\"messages\", [])\n\n        if not messages:\n            await update.message.reply_text(\"📭 لا توجد رسائل في البريد.\")\n            return\n\n        emails = []\n        for msg in messages:\n            msg_data = service.users().messages().get(userId=\"me\", id=msg[\"id\"]).execute()\n            headers = msg_data.get(\"payload\", {}).get(\"headers\", [])\n            subject = next((h[\"value\"] for h in headers if h[\"name\"] == \"Subject\"), \"بدون عنوان\")\n            sender = next((h[\"value\"] for h in headers if h[\"name\"] == \"From\"), \"غير معروف\")\n            emails.append({\"From\": sender, \"Subject\": subject})\n\n        # حفظ النتائج في ملف CSV\n        with open(\"emails.csv\", \"w\", newline=\"\", encoding=\"utf-8\") as f:\n            writer = csv.DictWriter(f, fieldnames=[\"From\", \"Subject\"])\n            writer.writeheader()\n            writer.writerows(emails)\n\n        text = \"✅ <b>تم سحب آخر 10 رسائل:</b>\\n\\n\"\n        for i, email in enumerate(emails, start=1):\n            safe_from = html.escape(email['From'])\n            safe_subject = html.escape(email['Subject'])\n            text += f\"{i}. <b>{safe_from}</b> — {safe_subject}\\n\"\n        text += \"\\n📁 تم حفظها في ملف <code>emails.csv</code>\"\n\n        await update.message.reply_text(text, parse_mode=\"HTML\", disable_web_page_preview=True)\n\n    except Exception as e:\n        await update.message.reply_text(f\"❌ حدث خطأ أثناء جلب الرسائل:\\n\\n{html.escape(str(e))}\", parse_mode=\"HTML\")\n","size_bytes":7815},"bot.sh":{"content":"#!/bin/bash\n\n# المتغيرات بنفس الأسماء المستخدمة في المحادثة\nSMART_SCHEDULER_TOKEN=\"8402278212:AAFmTWzAtrvF9SOy9sdwduz1LmNrT_oqHmo\"\nGOOGLE_CLIENT_ID=\"1015270124270-fg53ehvs093roual651kppfq5rpmm56t.apps.googleusercontent.com\"\nGOOGLE_CLIENT_SECRET=\"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\"\n\n# استخدام المتغيرات\necho \"=== إعدادات البوت ===\"\necho \"التوكن: ${SMART_SCHEDULER_TOKEN:0:10}...\"\necho \"العميل: ${GOOGLE_CLIENT_ID:0:10}...\"\necho \"السر: ${GOOGLE_CLIENT_SECRET:0:10}...\"\necho \"✅ جاهز للاستخدام\"\n","size_bytes":591},"modules/inbox/telegram_inbox.py":{"content":"# telegram_inbox_module.py\n# =========================================\n# Telegram Inbox Module\n# - يسحب آخر 10 رسائل فقط من كل دردشة\n# - تسجيل دخول Telethon تفاعلي عند الحاجة\n# - حفظ النتائج في JSON\n# =========================================\n\nimport os\nimport json\nimport asyncio\nimport logging\nfrom typing import List, Dict, Any\nfrom telethon import TelegramClient, errors\nfrom telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup\nfrom telegram.ext import ContextTypes\n\n# ---------- logging ----------\nlogging.basicConfig(\n    format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\", level=logging.INFO\n)\nlogger = logging.getLogger(\"telegram_inbox_module\")\n\n# ---------- Telethon config ----------\nAPI_ID = int(os.getenv(\"API_ID\", 0))\nAPI_HASH = os.getenv(\"API_HASH\", \"\")\nSESSION_NAME = os.getenv(\"SESSION_NAME\", \"telegram_inbox_session\")\nDATA_FILE = os.getenv(\"DATA_FILE\", \"telegram_inbox.json\")\n\n# ---------- Telethon client ----------\nclient = TelegramClient(SESSION_NAME, API_ID, API_HASH)\n\n# ---------- persistent store ----------\nif os.path.exists(DATA_FILE):\n    try:\n        with open(DATA_FILE, \"r\", encoding=\"utf-8\") as f:\n            user_inboxes = json.load(f)\n    except Exception:\n        user_inboxes = {}\nelse:\n    user_inboxes = {}\n\ndef save_data():\n    try:\n        with open(DATA_FILE, \"w\", encoding=\"utf-8\") as f:\n            json.dump(user_inboxes, f, ensure_ascii=False, indent=2)\n    except Exception as e:\n        logger.exception(\"Failed to save data: %s\", e)\n\n# ---------- interactive Telethon sign-in ----------\nasync def ensure_telethon_authorized() -> bool:\n    try:\n        if not client.is_connected():\n            await client.connect()\n\n        if await client.is_user_authorized():\n            return True\n\n        print(\"\\n[Telethon] تسجيل الدخول لأول مرة...\")\n        phone = input(\"📱 أدخل رقم هاتفك (مثلاً +9677...): \").strip()\n        await client.send_code_request(phone)\n        code = input(\"🔢 أدخل الكود الذي وصلك على التليجرام: \").strip()\n\n        try:\n            await client.sign_in(phone, code)\n        except errors.SessionPasswordNeededError:\n            pwd = input(\"🔒 الحساب محمي بكلمة مرور، أدخلها: \").strip()\n            await client.sign_in(password=pwd)\n\n        return await client.is_user_authorized()\n\n    except Exception as e:\n        logger.exception(\"Authorization failed: %s\", e)\n        return False\n\n# ---------- show inbox button ----------\nasync def show_telegram_inbox(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    keyboard = [\n        [InlineKeyboardButton(\"▶️ سحب آخر 10 رسائل من كل دردشة\", callback_data=\"start_telegram\")],\n        [InlineKeyboardButton(\"🔙 رجوع\", callback_data=\"back_to_main\")]\n    ]\n    reply_markup = InlineKeyboardMarkup(keyboard)\n    text = \"💬 اضغط الزر أدناه لسحب آخر 10 رسائل فقط من كل دردشة\"\n\n    if update.message:\n        await update.message.reply_text(text=text, reply_markup=reply_markup)\n    elif update.callback_query:\n        await update.callback_query.answer()\n        await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup)\n\n# ---------- main handler ----------\nasync def handle_inbox_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    query = update.callback_query\n    if not query:\n        return\n\n    data = query.data\n\n    if data == \"start_telegram\":\n        await query.edit_message_text(\"⏳ جاري سحب آخر 10 رسائل من كل دردشة...\")\n        await fetch_all_dialogs(update, context)\n\n    elif data.startswith(\"open_chat_\"):\n        chat_id = int(data.split(\"_\")[-1])\n        await open_chat(update, context, chat_id)\n\n    elif data == \"next_msg\":\n        await navigate_messages(update, context, \"next\")\n\n    elif data == \"prev_msg\":\n        await navigate_messages(update, context, \"prev\")\n\n    elif data == \"back_to_list\":\n        await show_dialog_list(update, context)\n\n    else:\n        await query.answer(\"❌ الخيار غير معروف\", show_alert=True)\n\n# ---------- fetch dialogs (limit 10 messages) ----------\nasync def fetch_all_dialogs(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    try:\n        ok = await ensure_telethon_authorized()\n        if not ok:\n            await update.callback_query.edit_message_text(\"❌ لم يتم تسجيل الدخول إلى Telethon.\")\n            return\n\n        dialogs = await client.get_dialogs(limit=None)\n        user_key = str(update.effective_user.id)\n        user_store: Dict[str, Any] = {\"dialogs\": [], \"messages\": {}}\n\n        for d in dialogs:\n            d_id = d.id\n            d_name = d.name or getattr(d.entity, \"username\", \"\") or \"بدون اسم\"\n            d_type = \"user\" if d.is_user else \"group\" if d.is_group else \"channel\"\n\n            messages_list: List[Dict[str, Any]] = []\n            async for msg in client.iter_messages(d_id, limit=10):\n                messages_list.append({\n                    \"id\": msg.id,\n                    \"date\": msg.date.isoformat() if msg.date else None,\n                    \"text\": msg.text or \"[بدون نص]\"\n                })\n\n            user_store[\"dialogs\"].append({\n                \"id\": d_id,\n                \"name\": d_name,\n                \"type\": d_type,\n                \"total_messages_fetched\": len(messages_list)\n            })\n            user_store[\"messages\"][str(d_id)] = messages_list\n\n        user_inboxes[user_key] = user_store\n        save_data()\n\n        await update.callback_query.edit_message_text(\"✅ تم سحب آخر 10 رسائل من كل دردشة.\\n📂 جارٍ عرض القائمة...\")\n        context.user_data[\"dialogs\"] = dialogs\n\n        await show_dialog_list(update, context)\n\n    except Exception as e:\n        logger.exception(\"Error in fetch_all_dialogs: %s\", e)\n        await update.callback_query.edit_message_text(\"❌ حدث خطأ أثناء السحب.\")\n    finally:\n        if client.is_connected():\n            await client.disconnect()\n\n# ---------- show chat list ----------\nasync def show_dialog_list(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    dialogs = context.user_data.get(\"dialogs\", [])\n    keyboard = []\n    for d in dialogs:\n        name = d.name or \"بدون اسم\"\n        if len(name) > 30:\n            name = name[:27] + \"...\"\n        t = \"👤\" if d.is_user else \"👥\" if d.is_group else \"📢\"\n        keyboard.append([InlineKeyboardButton(f\"{t} {name}\", callback_data=f\"open_chat_{d.id}\")])\n\n    keyboard.append([InlineKeyboardButton(\"🔙 رجوع\", callback_data=\"back_to_main\")])\n    reply_markup = InlineKeyboardMarkup(keyboard)\n\n    if update.callback_query:\n        await update.callback_query.edit_message_text(\"💬 قائمة الدردشات:\", reply_markup=reply_markup)\n    elif update.message:\n        await update.message.reply_text(\"💬 قائمة الدردشات:\", reply_markup=reply_markup)\n\n# ---------- open a specific chat ----------\nasync def open_chat(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int):\n    user_key = str(update.effective_user.id)\n    messages = user_inboxes.get(user_key, {}).get(\"messages\", {}).get(str(chat_id), [])\n\n    if not messages:\n        await update.callback_query.answer(\"لا توجد رسائل.\", show_alert=True)\n        return\n\n    context.user_data[\"messages\"] = messages\n    context.user_data[\"msg_index\"] = 0\n    await display_message(update, context, messages[0])\n\n# ---------- display message ----------\nasync def display_message(update: Update, context: ContextTypes.DEFAULT_TYPE, msg):\n    index = context.user_data.get(\"msg_index\", 0)\n    messages = context.user_data.get(\"messages\", [])\n    total = len(messages)\n\n    text = f\"🕓 {msg.get('date', '[بدون تاريخ]')}\\n\\n{msg.get('text', '[بدون نص]')}\"\n    buttons = []\n\n    if index > 0:\n        buttons.append(InlineKeyboardButton(\"⬅️ السابق\", callback_data=\"prev_msg\"))\n    if index < total - 1:\n        buttons.append(InlineKeyboardButton(\"التالي ➡️\", callback_data=\"next_msg\"))\n    buttons.append(InlineKeyboardButton(\"🔙 رجوع\", callback_data=\"back_to_list\"))\n\n    reply_markup = InlineKeyboardMarkup([buttons])\n\n    if update.callback_query:\n        await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup)\n    elif update.message:\n        await update.message.reply_text(text=text, reply_markup=reply_markup)\n\n# ---------- navigate between messages ----------\nasync def navigate_messages(update: Update, context: ContextTypes.DEFAULT_TYPE, direction: str):\n    index = context.user_data.get(\"msg_index\", 0)\n    messages = context.user_data.get(\"messages\", [])\n    if not messages:\n        await update.callback_query.answer(\"لا توجد رسائل.\", show_alert=True)\n        return\n\n    if direction == \"next\" and index < len(messages) - 1:\n        context.user_data[\"msg_index\"] += 1\n    elif direction == \"prev\" and index > 0:\n        context.user_data[\"msg_index\"] -= 1\n\n    await display_message(update, context, messages[context.user_data[\"msg_index\"]])\n\n# =========================================\n# نهاية الملف\n# =========================================\n","size_bytes":9340},"smart_scheduler.sh":{"content":"#!/bin/bash\n\n# =============================================\n# SMART SCHEDULER SCRIPT\n# =============================================\n\n# الألوان للعرض\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# المتغيرات الحساسة (يتم تعبئتها من ملف .env)\nSMART_SCHEDULER_TOKEN=\"\"\nGOOGLE_CLIENT_ID=\"\"\nGOOGLE_CLIENT_SECRET=\"\"\n\n# دوال المساعدة\nlog() {\n    echo -e \"${GREEN}✓${NC} $1\"\n}\n\nerror() {\n    echo -e \"${RED}✗${NC} $1\"\n}\n\nwarn() {\n    echo -e \"${YELLOW}!${NC} $1\"\n}\n\ninfo() {\n    echo -e \"${BLUE}ℹ${NC} $1\"\n}\n\n# تحميل المتغيرات من ملف .env\nload_env() {\n    if [ -f \".env\" ]; then\n        # قراءة ملف .env وتجنب التعليقات والاسطر الفارغة\n        while IFS= read -r line; do\n            # تخطي التعليقات والاسطر الفارغة\n            if [[ ! $line =~ ^# && ! -z $line ]]; then\n                export \"$line\"\n            fi\n        done < \".env\"\n        \n        # تعيين المتغيرات المحلية\n        SMART_SCHEDULER_TOKEN=\"${SMART_SCHEDULER_TOKEN:-$1}\"\n        GOOGLE_CLIENT_ID=\"${GOOGLE_CLIENT_ID:-$2}\"\n        GOOGLE_CLIENT_SECRET=\"${GOOGLE_CLIENT_SECRET:-$3}\"\n        \n        log \"تم تحميل الإعدادات من ملف .env\"\n    else\n        warn \"ملف .env غير موجود - سيتم استخدام القيم الافتراضية\"\n    fi\n}\n\n# التحقق من المتغيرات المطلوبة\ncheck_required_vars() {\n    local missing_vars=()\n    \n    if [ -z \"$SMART_SCHEDULER_TOKEN\" ]; then\n        missing_vars+=(\"SMART_SCHEDULER_TOKEN\")\n    fi\n    \n    if [ -z \"$GOOGLE_CLIENT_ID\" ]; then\n        missing_vars+=(\"GOOGLE_CLIENT_ID\")\n    fi\n    \n    if [ -z \"$GOOGLE_CLIENT_SECRET\" ]; then\n        missing_vars+=(\"GOOGLE_CLIENT_SECRET\")\n    fi\n    \n    if [ ${#missing_vars[@]} -ne 0 ]; then\n        error \"المتغيرات المطلوبة غير موجودة: ${missing_vars[*]}\"\n        return 1\n    fi\n    \n    return 0\n}\n\n# عرض المعلومات (بدون القيم الكاملة)\nshow_info() {\n    echo \"=== معلومات التطبيق ===\"\n    echo \"📱 Telegram Bot: ${SMART_SCHEDULER_TOKEN:0:10}...\"\n    echo \"🔐 Google Client ID: ${GOOGLE_CLIENT_ID:0:10}...\"\n    echo \"🔑 Google Client Secret: ${GOOGLE_CLIENT_SECRET:0:10}...\"\n    echo \"=========================\"\n}\n\n# التحقق من صحة توكن التليجرام\ncheck_telegram_token() {\n    info \"التحقق من صحة توكن التليجرام...\"\n    \n    local response\n    response=$(curl -s \"https://api.telegram.org/bot${SMART_SCHEDULER_TOKEN}/getMe\")\n    \n    if echo \"$response\" | grep -q '\"ok\":true'; then\n        local bot_name\n        bot_name=$(echo \"$response\" | grep -o '\"username\":\"[^\"]*' | cut -d'\"' -f4)\n        log \"التوكن صالح - اسم البوت: @$bot_name\"\n        return 0\n    else\n        error \"التوكن غير صالح\"\n        return 1\n    fi\n}\n\n# إنشاء ملف .env إذا لم يكن موجوداً\ncreate_env_file() {\n    cat > .env << ENV_CONTENT\nSMART_SCHEDULER_TOKEN=8402278212:AAFmTWzAtrvF9SOy9sdwduz1LmNrT_oqHmo\nGOOGLE_CLIENT_ID=1015270124270-fg53ehvs093roual651kppfq5rpmm56t.apps.googleusercontent.com\nGOOGLE_CLIENT_SECRET=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\nENV_CONTENT\n    \n    log \"تم إنشاء ملف .env\"\n    chmod 600 .env\n    warn \"⚠️  يرجى تحديث القيم في ملف .env بالقيم الحقيقية\"\n}\n\n# الدالة الرئيسية\nmain() {\n    echo \"🚀 بدء تشغيل Smart Scheduler...\"\n    \n    # تحميل الإعدادات\n    load_env\n    \n    # التحقق من المتغيرات المطلوبة\n    if ! check_required_vars; then\n        error \"المتغيرات المطلوبة غير موجودة\"\n        read -p \"هل تريد إنشاء ملف .env؟ (y/n) \" -n 1 -r\n        echo\n        if [[ $REPLY =~ ^[Yy]$ ]]; then\n            create_env_file\n            load_env\n        else\n            error \"لا يمكن المتابعة بدون المتغيرات المطلوبة\"\n            exit 1\n        fi\n    fi\n    \n    # عرض المعلومات\n    show_info\n    \n    # التحقق من التوكن\n    if check_telegram_token; then\n        log \"البوت جاهز للاستخدام!\"\n    else\n        error \"هناك مشكلة في توكن البوت\"\n    fi\n    \n    # هنا يمكنك إضافة المزيد من الوظائف\n    info \"التطبيق جاهز للعمل 🎯\"\n}\n\n# معالجة الأوامر\ncase \"${1:-}\" in\n    \"init\")\n        create_env_file\n        ;;\n    \"check\")\n        load_env\n        check_telegram_token\n        ;;\n    \"info\")\n        load_env\n        show_info\n        ;;\n    \"help\"|\"-h\"|\"--help\")\n        echo \"الاستخدام: $0 [command]\"\n        echo \"\"\n        echo \"الأوامر المتاحة:\"\n        echo \"  init     - إنشاء ملف .env\"\n        echo \"  check    - التحقق من صحة التوكن\"\n        echo \"  info     - عرض المعلومات\"\n        echo \"  help     - عرض هذه المساعدة\"\n        echo \"  (بدون أمر) - تشغيل الوضع العادي\"\n        ;;\n    *)\n        main\n        ;;\nesac\n","size_bytes":5236},"modules/events/events.py":{"content":"from telegram import InlineKeyboardButton, InlineKeyboardMarkup\n\n# --- عرض قائمة الفعاليات والملاحظات المهمة ---\nasync def show_events(update, context):\n    text = \"🗓️ *الفعاليات والملاحظات المهمة*\\nاختر ما تريد عرضه:\"\n    keyboard = [\n        [InlineKeyboardButton(\"📌 أهم الملاحظات\", callback_data=\"events_notes\")],\n        [InlineKeyboardButton(\"🎯 الفعاليات القادمة\", callback_data=\"events_upcoming\")],\n        [InlineKeyboardButton(\"↩️ العودة\", callback_data=\"main_menu\")]\n    ]\n    reply_markup = InlineKeyboardMarkup(keyboard)\n\n    if update.message:\n        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=\"Markdown\")\n    elif update.callback_query:\n        await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode=\"Markdown\")\n\n\n# --- التعامل مع الخيارات الفرعية للفعاليات ---\nasync def handle_events_selection(update, context):\n    query = update.callback_query\n    data = query.data\n\n    if data == \"events_notes\":\n        text = (\n            \"📌 *أهم الملاحظات*\\n\"\n            \"─────────────────────────\\n\"\n            \"1️⃣ تذكير بمراجعة الردود التلقائية يومياً.\\n\"\n            \"2️⃣ فحص النشر المجدول قبل الساعة 8 صباحاً.\\n\"\n            \"3️⃣ متابعة أداء المنشورات الأسبوعية.\"\n        )\n    elif data == \"events_upcoming\":\n        text = (\n            \"🎯 *الفعاليات القادمة*\\n\"\n            \"─────────────────────────\\n\"\n            \"1️⃣ ورشة عمل: إدارة الوقت - 25 أكتوبر\\n\"\n            \"2️⃣ بث مباشر: نصائح للنشر الرقمي - 28 أكتوبر\\n\"\n            \"3️⃣ تحديث النظام الجديد - 30 أكتوبر\"\n        )\n    elif data == \"main_menu\":\n        from bot import show_main_menu\n        await show_main_menu(update, context)\n        return\n    else:\n        text = \"🚧 هذا الخيار في طور التحسين\"\n\n    await query.edit_message_text(text=text, parse_mode=\"Markdown\")\n","size_bytes":2325}},"version":2}